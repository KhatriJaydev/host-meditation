{"ast":null,"code":"import _asyncToGenerator from \"D:/JD/old/Kids Game/Need to upload/gitlab meditation - Copy/host-meditation/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport { getMessaging, getToken } from 'firebase/messaging';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    setUserToken(token) {\n      localStorage.setItem('token', token);\n      // this.userToken = token;\n    }\n\n    constructor(formBuilder, httpClient) {\n      this.formBuilder = formBuilder;\n      this.httpClient = httpClient;\n      this.userToken = '';\n      this.signUpFormModel = this.formBuilder.group({\n        firstName: ['John', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n        lastName: ['Smith', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n        email: ['johnsmith@gmail.com', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n        password: ['Qwer@16', Validators.required],\n        deviceToken: ['deviceToken', Validators.required]\n      });\n      this.profileUpdate = this.formBuilder.group({\n        firstName: ['', [Validators.pattern('[a-zA-Z ]*')]],\n        lastName: ['', [Validators.pattern('[a-zA-Z ]*')]],\n        email: ['', [Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n        file: ''\n      });\n      this.loginFormModel = this.formBuilder.group({\n        email: ['johnsmith@gmail.com', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n        password: ['John@1', [Validators.required]],\n        deviceToken: ''\n      });\n      this.baseUrl = environment.baseURL;\n    }\n    requestPermission() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const messaging = getMessaging();\n        try {\n          const currentToken = yield getToken(messaging, {\n            vapidKey: environment.firebase.vpaidKey\n          });\n          if (currentToken) {\n            console.log(currentToken);\n            _this.loginFormModel.patchValue({\n              deviceToken: currentToken\n            });\n            return currentToken;\n          } else {\n            console.log('Token is undefined');\n            return 'undefined';\n          }\n        } catch (error) {\n          console.error('Error getting token:', error);\n          return 'undefined';\n        }\n      })();\n    }\n    createUser(formData) {\n      const url = `${this.baseUrl}/user/signUp`;\n      const headers = new HttpHeaders();\n      return this.httpClient.post(url, formData, {\n        headers\n      });\n    }\n    createUserAccount() {\n      const signUpdata = new FormData();\n      signUpdata.append('firstName', this.signUpFormModel.get('firstName')?.value || '');\n      signUpdata.append('lastName', this.signUpFormModel.get('lastName')?.value || '');\n      signUpdata.append('email', this.signUpFormModel.get('email')?.value || '');\n      signUpdata.append('password', this.signUpFormModel.get('password')?.value || '');\n      signUpdata.append('deviceToken', this.signUpFormModel.get('deviceToken')?.value || '');\n      return this.createUser(signUpdata);\n    }\n    profileUpdateForm() {\n      const updateProfile = new FormData();\n      updateProfile.append('firstName', this.profileUpdate.get('firstName')?.value || '');\n      updateProfile.append('lastName', this.profileUpdate.get('lastName')?.value || '');\n      updateProfile.append('email', this.profileUpdate.get('email')?.value || '');\n      const file = this.profileUpdate.get('file')?.value;\n      if (file) {\n        updateProfile.append('image', file);\n      }\n      return this.updateUserData(updateProfile);\n    }\n    updateUserData(formData) {\n      const url = `${this.baseUrl}/user/update`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.httpClient.patch(url, formData, {\n        headers\n      });\n    }\n    loginUser(loginUser) {\n      const url = `${this.baseUrl}/auth/login`;\n      return this.httpClient.post(url, loginUser);\n    }\n    loginUserAccount() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const currentToken = yield _this2.requestPermission();\n        const loginData = {\n          email: _this2.loginFormModel.get('email')?.value || '',\n          password: _this2.loginFormModel.get('password')?.value || '',\n          deviceToken: currentToken || ''\n        };\n        return _this2.loginUser(loginData);\n      })();\n    }\n    getUserInfo() {\n      const url = `${this.baseUrl}/user/userInfo`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.httpClient.get(url, {\n        headers\n      });\n    }\n    handleUserInfoResponse(userInfo) {\n      console.log('User Info:', userInfo);\n      this.profileUpdate.patchValue({\n        firstName: userInfo?.data?.firstName || '',\n        lastName: userInfo?.data?.lastName || '',\n        email: userInfo?.data?.email || '',\n        file: userInfo?.data?.image || ''\n      });\n    }\n    verifyChangePassword(oldPassword) {\n      const url = `${this.baseUrl}/user/verifyChangePassword`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      const body = {\n        oldPassword: oldPassword\n      };\n      return this.httpClient.patch(url, body, {\n        headers\n      });\n    }\n    changePassword(changePasswordString, newPassword, confirmPassword) {\n      const url = `${this.baseUrl}/user/changePassword`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      const body = {\n        changePasswordString: changePasswordString,\n        newPassword: newPassword,\n        confirmPassword: confirmPassword\n      };\n      return this.httpClient.patch(url, body, {\n        headers\n      });\n    }\n    emailVerify(userEmail) {\n      const url = `${this.baseUrl}/user/forgotPassword`;\n      const body = {\n        email: userEmail\n      };\n      return this.httpClient.post(url, body);\n    }\n    otpEmailVerify(userEmail, userOtp) {\n      const url = `${this.baseUrl}/user/verifyOtp`;\n      const body = {\n        email: userEmail,\n        otp: userOtp\n      };\n      return this.httpClient.post(url, body);\n    }\n    userResetPassword(userEmail, userOtpString, userNewPassword, userConfirmPassword) {\n      const url = `${this.baseUrl}/user/resetPassword`;\n      const body = {\n        email: userEmail,\n        otpString: userOtpString,\n        newPassword: userNewPassword,\n        confirmPassword: userConfirmPassword\n      };\n      return this.httpClient.post(url, body);\n    }\n    getUserNotificationStatus() {\n      const url = `${this.baseUrl}/notifications/getUserNotifications`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.httpClient.get(url, {\n        headers\n      });\n    }\n    updateNotification(idNotification, notificationStatus) {\n      const url = `${this.baseUrl}/notifications/userNotificationsEnableDisable/${idNotification}?isSubscribed=${notificationStatus}`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      const body = {\n        id: idNotification,\n        isSubscribed: notificationStatus\n      };\n      return this.httpClient.post(url, body, {\n        headers\n      });\n    }\n    getUserPreferencesStatus() {\n      const url = `${this.baseUrl}/preferences/getUserPreferences`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      return this.httpClient.get(url, {\n        headers\n      });\n    }\n    updatePreferences(idPreference, preferenceStatus) {\n      const url = `${this.baseUrl}/preferences/userPreferencesEnableDisable/${idPreference}?flag=${preferenceStatus}`;\n      const headers = new HttpHeaders({\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      });\n      const body = {\n        id: idPreference,\n        isSubscribed: preferenceStatus\n      };\n      return this.httpClient.post(url, body, {\n        headers\n      });\n    }\n    validateToken() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const url = `${_this3.baseUrl}/auth/validate-token`;\n        const oldToken = localStorage.getItem('token');\n        const currentToken = yield _this3.requestPermission();\n        const headers = new HttpHeaders({\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        });\n        const body = {\n          token: oldToken,\n          deviceToken: currentToken || ''\n        };\n        return _this3.httpClient.post(url, body, {\n          headers\n        });\n      })();\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}